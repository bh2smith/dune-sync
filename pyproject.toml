[project]
name = "dune-sync"
dynamic = ['version', 'dependencies']

[tool.poetry]
package-mode = false
name = "dune-sync"
description = ""
authors = [
    "Benjamin Smith <bh2smith@users.noreply.github.com>",
    "mooster531 <mooster531@users.noreply.github.com>",
    "Felix Leupold <masked@example.com>",
]

[tool.poetry.dependencies]
python = ">=3.12,<3.14"
dune-client = ">=1.7.8"
pandas = "*"
sqlalchemy = "*"
python-dotenv = "*"
psycopg2-binary = "*"
tomli = "*"
pyyaml = "*"
prometheus-client = "*"

[tool.poetry.dev-dependencies]
black = "*"
pylint = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "*"
pytest-asyncio = "*"
pandas-stubs = "*"
sqlalchemy-stubs = "*"
coverage = "*"
ruff = "*"
mypy = "*"
mypy-extensions = "*"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py313"
line-length = 88

exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstring
    "T20", # flake8-print
    "RET", # flake8-return
    "PL",  # pylint
]

ignore = [
    "D104", # Missing docstring in public package
    "D203", # Remove to avoid conflict with D211
    "D213", # Remove to avoid conflict with D212
    "D107", # Missing docstring in __init__
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D",    # Ignore all docstring rules in tests
    "T20",  # Allow print statements in tests
    "N802", # Allow function names like "test_someFunction_does_something"
    "B018", # Allow using mock objects without explicit assert
    "RET",  # Allow multiple returns in test functions
    "E731", # Allow lambda assignments in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
